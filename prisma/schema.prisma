// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum PartyType {
  CUSTOMER
  SUPPLIER
  VENDOR
}

enum TransactionType {
  SALE
  PURCHASE
  EXPENSE
  INCOME
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  CHEQUE
  UPI
  WALLET
}

// Company/Settings
model Company {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?
  taxNumber   String?
  logo        String?
  currency    String   @default("USD")
  dateFormat  String   @default("DD/MM/YYYY")
  timeZone    String   @default("UTC")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("companies")
}

// Categories for Items
model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  items       Item[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

// Parties (Customers, Suppliers, Vendors)
model Party {
  id              String        @id @default(cuid())
  type            PartyType
  name            String
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  taxNumber       String?
  paymentTerms    Int?          // Days
  creditLimit     Decimal?      @db.Decimal(10, 2)
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  salesTransactions     Transaction[] @relation("CustomerTransactions")
  purchaseTransactions  Transaction[] @relation("SupplierTransactions")
  invoices              Invoice[]

  @@map("parties")
}

// Items/Products/Services
model Item {
  id            String            @id @default(cuid())
  name          String
  description   String?
  sku           String?           @unique
  barcode       String?
  categoryId    String?
  category      Category?         @relation(fields: [categoryId], references: [id])
  unitPrice     Decimal           @db.Decimal(10, 2)
  costPrice     Decimal?          @db.Decimal(10, 2)
  stockQuantity Int               @default(0)
  minStock      Int               @default(0)
  unit          String            @default("pcs")
  taxRate       Decimal           @default(0) @db.Decimal(5, 2)
  isActive      Boolean           @default(true)
  isService     Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  transactionItems TransactionItem[]
  invoiceItems     InvoiceItem[]

  @@map("items")
}

// Transactions (Sales, Purchases, Expenses, Income)
model Transaction {
  id              String            @id @default(cuid())
  type            TransactionType
  transactionNo   String            @unique
  date            DateTime          @default(now())
  customerId      String?
  customer        Party?            @relation("CustomerTransactions", fields: [customerId], references: [id])
  supplierId      String?
  supplier        Party?            @relation("SupplierTransactions", fields: [supplierId], references: [id])
  subtotal        Decimal           @db.Decimal(10, 2)
  taxAmount       Decimal           @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal           @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal           @db.Decimal(10, 2)
  paymentStatus   PaymentStatus     @default(PENDING)
  paymentMethod   PaymentMethod?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  items           TransactionItem[]
  payments        Payment[]

  @@map("transactions")
}

// Transaction Items (Line Items)
model TransactionItem {
  id            String      @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  itemId        String
  item          Item        @relation(fields: [itemId], references: [id])
  quantity      Int
  unitPrice     Decimal     @db.Decimal(10, 2)
  discount      Decimal     @default(0) @db.Decimal(10, 2)
  taxRate       Decimal     @default(0) @db.Decimal(5, 2)
  totalAmount   Decimal     @db.Decimal(10, 2)

  @@map("transaction_items")
}

// Invoices
model Invoice {
  id              String        @id @default(cuid())
  invoiceNo       String        @unique
  customerId      String
  customer        Party         @relation(fields: [customerId], references: [id])
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  status          InvoiceStatus @default(DRAFT)
  subtotal        Decimal       @db.Decimal(10, 2)
  taxAmount       Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal       @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal       @db.Decimal(10, 2)
  paidAmount      Decimal       @default(0) @db.Decimal(10, 2)
  balanceAmount   Decimal       @db.Decimal(10, 2)
  paymentTerms    String?
  notes           String?
  termsConditions String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  items           InvoiceItem[]
  payments        Payment[]

  @@map("invoices")
}

// Invoice Items
model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  itemId      String
  item        Item    @relation(fields: [itemId], references: [id])
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(10, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2)
  totalAmount Decimal @db.Decimal(10, 2)

  @@map("invoice_items")
}

// Payments
model Payment {
  id            String        @id @default(cuid())
  paymentNo     String        @unique
  transactionId String?
  transaction   Transaction?  @relation(fields: [transactionId], references: [id])
  invoiceId     String?
  invoice       Invoice?      @relation(fields: [invoiceId], references: [id])
  amount        Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

// Tax Rates
model TaxRate {
  id          String   @id @default(cuid())
  name        String
  rate        Decimal  @db.Decimal(5, 2)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tax_rates")
}

// System Settings
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Audit Log
model AuditLog {
  id        String   @id @default(cuid())
  action    String
  tableName String
  recordId  String
  oldValues Json?
  newValues Json?
  userId    String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
